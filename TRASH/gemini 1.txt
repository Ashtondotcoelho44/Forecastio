import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Load the cleaned data
df = pd.read_csv('forecastio_clean.csv')

# Define features and target variable
X = df.drop(columns=['humidity'])  # Features (all except target)
y = df['humidity']                  # Target variable

# Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Check for NaN and infinite values in training data
print("NaN values in X_train:")
print(X_train.isnull().sum())
print("Infinite values in X_train:")
print(np.isinf(X_train).sum())

print("NaN values in y_train:")
print(y_train.isnull().sum())
print("Infinite values in y_train:")
print(np.isinf(y_train).sum())

# Check data types of features
print("Data types of X_train:")
print(X_train.dtypes)

# Ensure shape compatibility
print(f'Shape of X_train: {X_train.shape}')
print(f'Shape of y_train: {y_train.shape}')

# Handle missing and infinite values
X_train.replace([np.inf, -np.inf], np.nan, inplace=True)  # Replace inf with NaN
X_train.fillna(X_train.mean(), inplace=True)              # Fill NaNs with mean

# Initialize and train the model if no issues found
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
predictions = model.predict(X_test)

# Calculate evaluation metrics
mae = mean_absolute_error(y_test, predictions)
rmse = mean_squared_error(y_test, predictions, squared=False)

print(f'Mean Absolute Error (MAE): {mae}')
print(f'Root Mean Square Error (RMSE): {rmse}')
